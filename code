import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
nltk.download('punkt_tab')
nltk.download('averaged_perceptron_tagger_eng')
nltk.download('maxent_ne_chunker_tab')
nltk.download('words')
nltk.download('vader_lexicon')

plt.style.use('ggplot')

df = pd.read_csv('Reviews.csv')
df.head(5)

fig = df['Score'].value_counts().sort_index().plot(kind= 'bar', title='Reviews by rating', figsize=(8,4))
fig.set_xlabel('Rating')
plt.show()

test_text = df['Text'][23]
test_text

tokens = nltk.word_tokenize(test_text)
tokens[:10]

tagged =nltk.pos_tag(tokens)
tagged[:10]

grouped = nltk.ne_chunk(tagged)
grouped.pprint()

from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm
senti = SentimentIntensityAnalyzer()

senti.polarity_scores ('that is terrible')
senti.polarity_scores ('I love this product')
senti.polarity_scores ('test_text')

results = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
    text = row['Text']
    myid = row['Id']
    # Check if the text is a string before processing
    if isinstance(text, str):
        results[myid] = senti.polarity_scores(text)
    else:
        # Optionally, handle non-string values, like replacing with an empty string or skipping
        results[myid] = senti.polarity_scores("") # Replace NaN with an empty string

vaders = pd.DataFrame.from_dict(results, orient='index')
vaders = vaders.reset_index().rename(columns={'index': 'Id'})
vaders = vaders.merge(df, how='left')

fig, axs = plt.subplots(2, 2, figsize=(8, 6)) # Changed to 2x2 layout and increased figure size

# Flatten the axs array for easier indexing
axs = axs.flatten()

# Use hue to color bars by Score
sns.barplot(data=vaders, x='Score', y='compound', ax = axs[0], hue='Score', palette='viridis', dodge=False)
sns.barplot(data=vaders, x='Score', y='pos', ax = axs[1], hue='Score', palette='viridis', dodge=False)
sns.barplot(data=vaders, x='Score', y='neg', ax = axs[2], hue='Score', palette='viridis', dodge=False)
sns.barplot(data=vaders, x='Score', y='neu', ax = axs[3], hue='Score', palette='viridis', dodge=False)

axs[0].set_title('Compound Score by Amazon Star Review')
axs[1].set_title('Positive Score by Amazon Star Review')
axs[2].set_title('Negative Score by Amazon Star Review')
axs[3].set_title('Neutral Score by Amazon Star Review')

plt.tight_layout()
plt.show()

from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification
from scipy.special import softmax

MODEL = f"cardiffnlp/twitter-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

print(test_text)
senti.polarity_scores(test_text)

encoded_text = tokenizer(test_text, return_tensors='pt')
output = model(**encoded_text)
scores = output[0][0].detach().numpy()
scores = softmax(scores)
scores_dict = {
    'roberta_neg' : scores[0],
    'roberta_neu' : scores[1],
    'roberta_pos' : scores[2]
}
print(scores_dict)

def polarity_scores_roberta(test_text):
    encoded_text = tokenizer(test_text, return_tensors='pt')
    output = model(**encoded_text)
    scores = output[0][0].detach().numpy()
    scores = softmax(scores)
    scores_dict = {
        'roberta_neg' : scores[0],
        'roberta_neu' : scores[1],
        'roberta_pos' : scores[2]
    }
    return scores_dict

results = {}
for i, row in tqdm(df.head(1000).iterrows(), total=1000):
  try:
    text = row['Text']
    myid = row['Id']
    # Check if the text is a string before processing
    if isinstance(text, str):
        Vader_results = senti.polarity_scores(text)
        Roberta_results = polarity_scores_roberta(text)
        # results[myid] = {'vader': Vader_results, 'roberta': Roberta_results}

    else:
        # Optionally, handle non-string values, like replacing with an empty string or skipping
        Vader_results = senti.polarity_scores("") # Replace NaN with an empty string
        Roberta_results = polarity_scores_roberta(text)
    Vader_results_rename = {}
    for key, value in Vader_results.items():
        Vader_results_rename[f'vader_{key}'] = value
    Roberta_results_rename = {}
    for key, value in Roberta_results.items():
        Roberta_results_rename[f'roberta_{key}'] = value
    both_results = {**Vader_results, **Roberta_results}
    results[myid] = both_results

  except RuntimeError:
    print(f'Broke for id {myid}')

results_df = pd.DataFrame(results).T
results_df = results_df.reset_index().rename(columns={'index': 'Id'})
results_df = results_df.merge(df, how='left')
results_df = results_df.rename(columns={
    'neg': 'vader_neg',
    'neu': 'vader_neu',
    'pos': 'vader_pos',
    'compound': 'vader_compound'
})

sns.pairplot(data=results_df, vars=['vader_neg', 'vader_neu', 'vader_pos', 'roberta_neg', 'roberta_neu', 'roberta_pos'], hue='Score', palette= 'tab10')
plt.show()

fig, axs = plt.subplots(1, 3, figsize=(18, 6)) # 1 row, 3 columns for neg, neu, pos

# Bar plot for Negative scores
sns.barplot(data=results_df, x='Score', y='vader_neg', ax=axs[0], color='green', label='VADER')
sns.barplot(data=results_df, x='Score', y='roberta_neg', ax=axs[0], color='darkblue', label='RoBERTa')
axs[0].set_title('Comparison of Negative Scores by Amazon Star Review')
axs[0].set_ylabel('Average Negative Score')
axs[0].legend()

# Bar plot for Neutral scores
sns.barplot(data=results_df, x='Score', y='vader_neu', ax=axs[1], color='green', label='VADER')
sns.barplot(data=results_df, x='Score', y='roberta_neu', ax=axs[1], color='darkblue', label='RoBERTa')
axs[1].set_title('Comparison of Neutral Scores by Amazon Star Review')
axs[1].set_ylabel('Average Neutral Score')
axs[1].legend()

# Bar plot for Positive scores
sns.barplot(data=results_df, x='Score', y='vader_pos', ax=axs[2], color='green', label='VADER')
sns.barplot(data=results_df, x='Score', y='roberta_pos', ax=axs[2], color='darkblue', label='RoBERTa')
axs[2].set_title('Comparison of Positive Scores by Amazon Star Review')
axs[2].set_ylabel('Average Positive Score')
axs[2].legend()

plt.tight_layout() # Adjust layout to prevent overlapping titles/labels
plt.show()

results_df.query('Score == 1').sort_values('roberta_pos', ascending=False)['Text'].values[0]
results_df.query('Score == 1').sort_values('vader_pos', ascending=False)['Text'].values[0]

#using hugging faces transformers
from transformers import pipeline
senti_pipeline = pipeline("sentiment-analysis")

senti_pipeline('this is good')
